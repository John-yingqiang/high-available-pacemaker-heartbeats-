#!/bin/sh
#
# Support:      linux-ha@lists.linux-ha.org
# License:      GNU General Public License (GPL)
# 
# Dedup_Filesystem
#      Description: Manages a Dedup_Filesystem on a shared storage medium.
#  Original Author: Eric Z. Ayers (eric.ayers@compgen.com)
# Original Release: 25 Oct 2000
#
# usage: ./Dedup_Filesystem {start|stop|status|monitor|validate-all|meta-data}
#
#	  OCF parameters are as below:
#		OCF_RESKEY_device
#		OCF_RESKEY_directory
#		OCF_RESKEY_fstype
#		OCF_RESKEY_options
#		OCF_RESKEY_statusfile_prefix
#		OCF_RESKEY_run_fsck
#		OCF_RESKEY_nfs_options
#
#OCF_RESKEY_device    : name of block device for the filesystem. e.g. /dev/sda1, /dev/md0
#			Or a -U or -L option for mount, or an NFS mount specification
#OCF_RESKEY_directory : the mount point for the filesystem
#OCF_RESKEY_fstype    : optional name of the filesystem type. e.g. ext2
#OCF_RESKEY_options   : options to be given to the mount command via -o
#OCF_RESKEY_statusfile_prefix : the prefix used for a status file for monitoring
#OCF_RESKEY_run_fsck  : fsck execution mode: auto(default)/force/no
#OCF_RESKEY_nfs_options  : options for NFS /etc/exports
#
#
# This assumes you want to manage a filesystem on a shared (SCSI) bus,
# on a replicated device (such as DRBD), or a network filesystem (such
# as NFS or Samba).
#
# Do not put this filesystem in /etc/fstab.  This script manages all of
# that for you.
#
# NOTE: If 2 or more nodes mount the same file system read-write, and
#       that file system is not designed for that specific purpose
#       (such as GFS or OCFS2), and is not a network file system like
#       NFS or Samba, then the filesystem is going to become
#       corrupted.
#
#	As a result, you should use this together with the stonith
#	option and redundant, independent communications paths.
#
#	If you don't do this, don't blame us when you scramble your
#	disk.

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
DFLT_STATUSDIR=".Dedup_Filesystem_status/"

# Variables used by multiple methods
HOSTOS=`uname`

# The status file is going to an extra directory, by default
#
prefix=${OCF_RESKEY_statusfile_prefix}
: ${prefix:=$DFLT_STATUSDIR}
suffix="${OCF_RESOURCE_INSTANCE}"
[ "$OCF_RESKEY_CRM_meta_clone" ] &&
	suffix="${suffix}_$OCF_RESKEY_CRM_meta_clone"
suffix="${suffix}_`uname -n`"
STATUSFILE=${OCF_RESKEY_directory}/$prefix$suffix
#######################################################################

usage() {
	cat <<-EOT
	usage: $0 {start|stop|status|monitor|validate-all|meta-data}
	EOT
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="Dedup_Filesystem">
<version>1.0</version>

<longdesc lang="en">
Resource script for Dedup_Filesystem. It manages a Filesystem on a
shared storage medium. 

The standard monitor operation of depth 0 (also known as probe)
checks if the filesystem is mounted. If you want deeper tests,
set OCF_CHECK_LEVEL to one of the following values:

10: read first 16 blocks of the device (raw read)

This doesn't exercise the filesystem at all, but the device on
which the filesystem lives. This is noop for non-block devices
such as NFS, SMBFS, or bind mounts.

20: test if a status file can be written and read

The status file must be writable by root. This is not always the
case with an NFS mount, as NFS exports usually have the
"root_squash" option set. In such a setup, you must either use
read-only monitoring (depth=10), export with "no_root_squash" on
your NFS server, or grant world write permissions on the
directory where the status file is to be placed.
</longdesc>
<shortdesc lang="en">Manages filesystem mounts</shortdesc>

<parameters>
<parameter name="device" required="1">
<longdesc lang="en">
The name of block device for the filesystem, or -U, -L options for mount, or NFS mount specification.
</longdesc>
<shortdesc lang="en">block device</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="directory" required="1">
<longdesc lang="en">
The mount point for the filesystem.
</longdesc>
<shortdesc lang="en">mount point</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="fstype" required="1">
<longdesc lang="en">
The type of filesystem to be mounted.
</longdesc>
<shortdesc lang="en">filesystem type</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="options">
<longdesc lang="en">
Any extra options to be given as -o options to mount.

For bind mounts, add "bind" here and set fstype to "none".
We will do the right thing for options such as "bind,ro".
</longdesc>
<shortdesc lang="en">options</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="statusfile_prefix">
<longdesc lang="en">
The prefix to be used for a status file for resource monitoring
with depth 20. If you don't specify this parameter, all status
files will be created in a separate directory.
</longdesc>
<shortdesc lang="en">status file prefix</shortdesc>
<content type="string" default="$DFLT_STATUSDIR" />
</parameter>

<parameter name="run_fsck">
<longdesc lang="en">
Specify how to decide whether to run fsck or not.

"auto"  : decide to run fsck depending on the fstype(default)
"force" : always run fsck regardless of the fstype
"no"    : do not run fsck ever.
</longdesc>
<shortdesc lang="en">run_fsck</shortdesc>
<content type="string" default="auto" />
</parameter>

<parameter name="fast_stop">
<longdesc lang="en">
Normally, we expect no users of the filesystem and the stop
operation to finish quickly. If you cannot control the filesystem
users easily and want to prevent the stop action from failing,
then set this parameter to "no" and add an appropriate timeout
for the stop operation.
</longdesc>
<shortdesc lang="en">fast stop</shortdesc>
<content type="boolean" default="yes" />
</parameter>

<parameter name="nfs_options">
<longdesc lang="en">
Options for NFS /etc/exports
Default would be:
For non-journaled mount: *(rw,no_root_squash,no_subtree_check,insecure,nohide,fsid=1,async)
For journaled mount: *(rw,no_root_squash,no_subtree_check,insecure,nohide,fsid=1,sync)
</longdesc>
<shortdesc lang="en">nfs_options</shortdesc>
<content type="string" default="" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="60" />
<action name="stop" timeout="60" />
<action name="notify" timeout="60" />
<action name="monitor" depth="0" timeout="40" interval="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

#
#	Make sure the kernel does the right thing with the FS buffers
#	This function should be called after unmounting and before mounting
#	It may not be necessary in 2.4 and later kernels, but it shouldn't hurt
#	anything either...
#
#	It's really a bug that you have to do this at all...
#
flushbufs() {
    if have_binary $BLOCKDEV ; then
      if [ "$blockdevice" = "yes" ] ; then
        $BLOCKDEV --flushbufs $1
        return $?
      fi
    fi
    return 0
}

# Take advantage of /etc/mtab if present, use portable mount command
# otherwise. Normalize format to "dev mountpoint fstype".
is_bind_mount() {
	echo "$options" | grep -w bind >/dev/null 2>&1
}
list_mounts() {
	local inpf=""
	if [ -e "/proc/mounts" ] && ! is_bind_mount; then
		inpf=/proc/mounts
	elif [ -f "/etc/mtab" -a -r "/etc/mtab" ]; then
		inpf=/etc/mtab
	fi
	if [ "$inpf" ]; then
		cut -d' ' -f1,2,3 < $inpf
	else
		$MOUNT | cut -d' ' -f1,3,5
	fi
}

determine_blockdevice() {
	if [ $blockdevice = "yes" ]; then
		return
	fi

	# Get the current real device name, if possible.
	# (specified devname could be -L or -U...)
	case "$FSTYPE" in
	nfs|smbfs|cifs|none) ;;
	*)	DEVICE=`list_mounts | grep " $MOUNTPOINT " | cut -d' ' -f1`
		if [ -b "$DEVICE" ]; then
		  blockdevice=yes
		fi
		;;
	esac
}

# Lists all filesystems potentially mounted under a given path,
# excluding the path itself.
list_submounts() {
	list_mounts | grep " $1/" | cut -d' ' -f2 | sort -r
}

ocfs2_del_cache() {
	if [ -e "$_OCFS2_uuid_cache" ]; then
		rm -f $_OCFS2_uuid_cache 
	fi
}

ocfs2_cleanup() {
	# We'll never see the post-stop notification. We're gone now,
	# have unmounted, and thus should remove the membership.
	#
	# (Do so regardless of whether we were unmounted already,
	# because the admin might have manually unmounted but not
	# cleared up the membership directory. Bad admin, no cookie.)
	#
	if [ ! -d "$OCFS2_FS_ROOT" ]; then
		ocf_log info "$OCFS2_FS_ROOT: Dedup_Filesystem membership already gone."
	else
		ocf_log info "$OCFS2_FS_ROOT: Removing membership directory."
		rm -rf $OCFS2_FS_ROOT/
	fi

	ocfs2_del_cache
}

ocfs2_fetch_uuid() {
	mounted.ocfs2 -d $DEVICE|tail -1|awk '{print $3}'|tr -d -- -|tr '[a-z]' '[A-Z]'
}

ocfs2_set_uuid() {
	_OCFS2_uuid_cache="$HA_RSCTMP/Dedup_Filesystem.ocfs2_uuid.$(echo $DEVICE|tr / .)"
	
	if [ "$OP" != "start" -a -e "$_OCFS2_uuid_cache" ]; then
		# Trust the cache.
		OCFS2_UUID=$(cat $_OCFS2_uuid_cache 2>/dev/null)
		return 0
	fi

	OCFS2_UUID=$(ocfs2_fetch_uuid)
	if [ -n "$OCFS2_UUID" -a "$OCFS2_UUID" != "UUID" ]; then
		# UUID valid:
		echo $OCFS2_UUID > $_OCFS2_uuid_cache 
		return 0
	fi

	# Ok, no UUID still, but that's alright for stop, because it
	# very likely means we never got started -
	if [ "$OP" = "stop" ]; then
		ocf_log warn "$DEVICE: No UUID; assuming never started!"
		OCFS2_UUID="UUID_NOT_SET"
		return 0
	fi

	# Everything else - wrong:
	ocf_log err "$DEVICE: Could not determine ocfs2 UUID for device."
	exit $OCF_ERR_GENERIC
}

ocfs2_init()
{
	# Check & initialize the OCFS2 specific variables.

	# This check detects whether the special/legacy hooks to
	# integrate OCFS2 with user-space clustering on SLES10 need to
	# be activated.
	# Newer kernels >= 2.6.28, with OCFS2+openAIS+Pacemaker, do
	# not need this:

	OCFS2_SLES10=""
	if [ "X$HA_cluster_type" = "Xcman" ]; then
	    return
	elif [ "X$HA_cluster_type" != "Xopenais" ]; then
		if grep -q "SUSE Linux Enterprise Server 10" /etc/SuSE-release >/dev/null 2>&1 ; then
			OCFS2_SLES10="yes"
			ocf_log info "$DEVICE: Enabling SLES10 compatibility mode for OCFS2."
		else
			ocf_log err "$DEVICE: ocfs2 is not compatible with your environment."
			exit $OCF_ERR_CONFIGURED
		fi
	else
		return
	fi

	if [ $OP != "stop" ]; then
		if [ -z "$OCF_RESKEY_CRM_meta_clone" ]; then
			ocf_log err "ocfs2 must be run as a clone."
			exit $OCF_ERR_GENERIC
		fi
	fi

	if [ $blockdevice = "no" ]; then
		ocf_log err "$DEVICE: ocfs2 needs a block device instead."
		exit $OCF_ERR_GENERIC
	fi
	
	for f in "$OCF_RESKEY_ocfs2_configfs" /sys/kernel/config/cluster /configfs/cluster ; do
		if [ -n "$f" -a -d "$f" ]; then
			OCFS2_CONFIGFS="$f"
			break
		fi
	done
	if [ ! -d "$OCFS2_CONFIGFS" ]; then
		ocf_log err "ocfs2 needs configfs mounted."
		exit $OCF_ERR_GENERIC
	fi

	ocfs2_set_uuid
	
	if [ -n "$OCF_RESKEY_ocfs2_cluster" ]; then
		OCFS2_CLUSTER=$(echo $OCF_RESKEY_ocfs2_cluster)
	else
		OCFS2_CLUSTER=$(find "$OCFS2_CONFIGFS" -maxdepth 1 -mindepth 1 -type d -printf %f 2>/dev/null)
		set -- $OCFS2_CLUSTER
		local n; n="$#"
		if [ $n -gt 1 ]; then
			ocf_log err "$OCFS2_CLUSTER: several clusters found."
			exit $OCF_ERR_GENERIC
		fi
		if [ $n -eq 0 ]; then
			ocf_log err "$OCFS2_CONFIGFS: no clusters found."
			exit $OCF_ERR_GENERIC
		fi
	fi

	OCFS2_CLUSTER_ROOT="$OCFS2_CONFIGFS/$OCFS2_CLUSTER"
	if [ ! -d "$OCFS2_CLUSTER_ROOT" ]; then
		ocf_log err "$OCFS2_CLUSTER: Cluster doesn't exist. Maybe o2cb hasn't been run?"
		exit $OCF_ERR_GENERIC
	fi
	
	OCFS2_FS_ROOT=$OCFS2_CLUSTER_ROOT/heartbeat/$OCFS2_UUID
}

# kernels < 2.6.26 can't handle bind remounts
bind_kernel_check() {
	echo "$options" | grep -w ro >/dev/null 2>&1 ||
		return
	uname -r | awk -F. '
	$1==2 && $2==6 {
		sub("[^0-9].*","",$3);
		if ($3<26)
			exit(1);
	}'
	[ $? -ne 0 ] &&
		ocf_log warn "kernel `uname -r` cannot handle read only bind mounts"
}
bind_mount() {
	if is_bind_mount && [ "$options" != "-o bind" ]
	then
		bind_kernel_check
		bind_opts=`echo $options | sed 's/bind/remount/'`
		$MOUNT $bind_opts $MOUNTPOINT
	else
		true # make sure to return OK
	fi
}

is_option() {
	echo $OCF_RESKEY_options | grep -w "$1" >/dev/null 2>&1
}

is_fsck_needed() {
	case $OCF_RESKEY_run_fsck in
	    force) true;;
	    no)    false;;
	    ""|auto)
		case $FSTYPE in
		    ext4|ext4dev|ext3|reiserfs|reiser4|nss|xfs|jfs|vfat|fat|nfs|cifs|smbfs|ocfs2|gfs2|none|lustre|zfs|btrfs)
			false;;
		    *)
			true;;
		esac;;
	    *)
		ocf_log warn "Invalid parameter value for fsck: '$OCF_RESKEY_run_fsck'; setting to 'auto'"
		OCF_RESKEY_run_fsck="auto"
		is_fsck_needed;;
	esac
}

#
# START: Start up the filesystem
#
Dedup_Filesystem_start()
{
        echo "touch ${OCF_RESOURCE_INSTANCE} now"
        ocf_log debug "create ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} now"
        ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} start
        rc=$?
        if [ $rc -ne 0 ]; then
                ocf_log err "Failed to run the ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} start for dedup filesystem "
                return $rc
        fi

	# See if the device is already mounted.
	if Dedup_Filesystem_status >/dev/null 2>&1 ; then
		ocf_log info "Dedup_Filesystem $MOUNTPOINT is already mounted."
		return $OCF_SUCCESS
	fi

	if [ -z "$FSTYPE" -o "$FSTYPE" = none ]; then
		: No FSTYPE specified, rely on the system has the right file-system support already 
	else
		# Insert Dedup_Filesystem module
		$MODPROBE $FSTYPE >/dev/null 
		grep -e "$FSTYPE"'$' /proc/filesystems >/dev/null
		if [ $? -ne 0 ] ; then
			ocf_log err "Couldn't find filesystem $FSTYPE in /proc/filesystems"
			return $OCF_ERR_INSTALLED
		fi
	fi

	# Check the filesystem & auto repair.  
	# NOTE: Some filesystem types don't need this step...  Please modify
	#       accordingly

	if [ $FSTYPE != "zfs" ]; then
		if [ $blockdevice = "yes" ]; then
		ocf_log info "Dedup device is a blockdevice"
			if [ "$DEVICE" != "/dev/null" -a ! -b "$DEVICE" ] ; then
				ocf_log err "Couldn't find device [$DEVICE]. Expected /dev/??? to exist"
				exit $OCF_ERR_INSTALLED
			fi

			if is_fsck_needed; then
				ocf_log info  "Starting dedup filesystem check on $DEVICE"
				if [ -z "$FSTYPE" ]; then
					$FSCK -p $DEVICE
				else
					$FSCK -t $FSTYPE -p $DEVICE
				fi

				# NOTE: if any errors at all are detected, it returns non-zero
				# if the error is >= 4 then there is a big problem
				if [ $? -ge 4 ]; then
					ocf_log err "Couldn't sucessfully fsck filesystem for $DEVICE"
					return $OCF_ERR_GENERIC	
				fi
			fi
		fi
	fi

	if [ ! -d "$MOUNTPOINT" ]; then
		ocf_log info "Could not find mnt point at this node. Will create now"
		mkdir -p "$MOUNTPOINT"
	fi

	flushbufs $DEVICE
	# Mount the filesystem.
	case "$FSTYPE" in
	none) $MOUNT $options $DEVICE $MOUNTPOINT &&
		bind_mount
		;;
	"") $MOUNT $options $DEVICE $MOUNTPOINT ;;
	dedup|ext4) $MOUNT -t $FSTYPE $options $DEVICE $MOUNTPOINT &&
		ocf_log info "Mounting dedup with filesystem type  -t $FSTYPE $options $DEVICE $MOUNTPOINT";;
	"zfs") /sbin/ldconfig
		/sbin/modprobe zfs
		/usr/local/sbin/zpool import usx-pool
		ocf_log info "Mounting zfs";;
	"btrfs") $MOUNT -t $FSTYPE $DEVICE $MOUNTPOINT &&
		ocf_log info "Mounting dedup with filesystem type  -t $FSTYPE $DEVICE $MOUNTPOINT";;
	esac

	if [ $? -ne 0 ]; then
		ocf_log err "Couldn't mount filesystem $DEVICE on $MOUNTPOINT"
		if [ -n "$OCFS2_SLES10" ]; then
			ocfs2_cleanup
		fi
		return $OCF_ERR_GENERIC
	fi
	ocf_log info "Removing old NFS exports."
	rm -f $EXPORTS_FILE
	grep_res=`grep $MOUNTPOINT $EXPORTS_FILE 2> /dev/null`
	ret_val=$?
	if [ $ret_val -eq 0 ]; then
		ocf_log info "Entry: \"$MOUNTPOINT\" $EXPORTS_OPT exists in $EXPORTS_FILE"
	else
		ocf_log info "Adding entry: \"$MOUNTPOINT\" $EXPORTS_OPT to file $EXPORTS_FILE"
		echo "\"$MOUNTPOINT\" $EXPORTS_OPT" >> $EXPORTS_FILE
		`exportfs -r`
	fi

	return $OCF_SUCCESS
}
# end of Dedup_Filesystem_start

signal_processes() {
	local dir=$1
	local sig=$2
	# fuser returns a non-zero return code if none of the
	# specified files is accessed or in case of a fatal 
	# error.
	if $FUSER -$sig -m -k $dir ; then
		ocf_log info "Some processes on $dir were signalled"
	else
		ocf_log info "No processes on $dir were signalled"
	fi
}
try_umount() {
	local SUB=$1
	case $FSTYPE in
		btrfs|ext4|dedup)
			$UMOUNT $umount_force $SUB
	;;
		zfs)
			/usr/local/sbin/zpool export usx-pool
	;;
		esac

	list_mounts | grep -q " $SUB " >/dev/null 2>&1 || {
		ocf_log info "unmounted $SUB successfully"
		return $OCF_SUCCESS
	}
	return $OCF_ERR_GENERIC
}
fs_stop() {
	local SUB=$1 timeout=$2 sig cnt
	for sig in TERM KILL; do
		cnt=$((timeout/2)) # try half time with TERM
		while [ $cnt -gt 0 ]; do
			try_umount $SUB &&
				return $OCF_SUCCESS
			ocf_log err "Couldn't unmount $SUB; trying cleanup with $sig"
			signal_processes $SUB $sig
			cnt=$((cnt-1))
			sleep 1
		done
	done
	return $OCF_ERR_GENERIC
}

#
# STOP: Unmount the filesystem
#
Dedup_Filesystem_stop()
{
	ocf_log info "Not stop Dedup_Filesystem"
	return $OCF_ERR_GENERIC
	
	if [ -f "/tmp/ha_disable" ]; then
		return $OCF_SUCCESS
	fi
	
	cmd = "/usr/bin/python /opt/milio/atlas/roles/ha/ha_shutdown.pyc umount_dedupFS > /dev/null 2>&1 "
	$cmd
	# See if the device is currently mounted
	Dedup_Filesystem_status >/dev/null 2>&1
	if [ $? -eq $OCF_NOT_RUNNING ]; then
		# Already unmounted, wonderful.
		rc=$OCF_SUCCESS
	else
		# Wipe the status file, but continue with a warning if
		# removal fails -- the file system might be read only
		if [ -f "$STATUSFILE" ]; then
			rm -f ${STATUSFILE}
			if [ $? -ne 0 ]; then
				ocf_log warn "Failed to remove status file ${STATUSFILE}."
			fi
		fi

		# Determine the real blockdevice this is mounted on (if
		# possible) prior to unmounting.
		determine_blockdevice

		# For networked filesystems, there's merit in trying -f:
		case "$FSTYPE" in
		nfs|cifs|smbfs) umount_force="-f" ;;
		esac

		# Umount all sub-filesystems mounted under $MOUNTPOINT/ too.
		local timeout
		for SUB in `list_submounts $MOUNTPOINT` $MOUNTPOINT; do
			ocf_log info "Trying to unmount $SUB"
			if ocf_is_true "$FAST_STOP"; then
				timeout=6
			else
				timeout=${OCF_RESKEY_CRM_meta_timeout:="20000"}
				timeout=$((timeout/1000))
			fi
			fs_stop $SUB $timeout
			rc=$?
			if [ $rc -ne $OCF_SUCCESS ]; then
				ocf_log err "Couldn't unmount $SUB, giving up!"
			else
		                # ignore if the ha_pseudo_resource stop failed
                		# and return the real failure code.
                		echo "rm ${OCF_RESOURCE_INSTANCE} now"
                		ha_pseudo_resource "${OCF_RESOURCE_INSTANCE}" stop
				pseudo_rc=$?
                		ocf_log debug "stop ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} return $pseudo_rc"
			fi
		done
	fi

	flushbufs $DEVICE

	return $rc
}
# end of Dedup_Filesystem_stop

#
# STATUS: is the filesystem mounted or not?
#
Dedup_Filesystem_status()
{
	if list_mounts | grep -q " $MOUNTPOINT " >/dev/null 2>&1; then
		rc=$OCF_SUCCESS
		msg="$MOUNTPOINT is mounted (running)"
        else
		rc=$OCF_NOT_RUNNING
		msg="$MOUNTPOINT is unmounted (stopped)"
        fi

	# Special case "monitor" to check whether the UUID cached and
	# on-disk still match?
	
        case "$OP" in
	status)	ocf_log info "$msg";;
	esac

        return $rc
}
# end of Dedup_Filesystem_status


# Note: the read/write tests below will stall in case the
# underlying block device (or in the case of a NAS mount, the
# NAS server) has gone away. In that case, if I/O does not
# return to normal in time, the operation hits its timeout
# and it is up to the CRM to initiate appropriate recovery
# actions (such as fencing the node).
#
# MONITOR 10: read the device
#
Dedup_Filesystem_monitor_10()
{
	if [ "$blockdevice" = "no" ] ; then
		ocf_log warn "$DEVICE is not a block device, monitor 10 is noop"
		return $OCF_SUCCESS
	fi
	dd_opts="iflag=direct bs=512 count=16"
	err_output=`dd if=$DEVICE $dd_opts 2>&1 >/dev/null`
	if [ $? -ne 0 ]; then
		ocf_log err "Failed to read device $DEVICE"
		ocf_log err "dd said: $err_output"
		return $OCF_ERR_GENERIC
	fi
	return $OCF_SUCCESS
}
#
# MONITOR 20: write and read a status file
#
Dedup_Filesystem_monitor_20()
{
	# Writing to the device in O_DIRECT mode is imperative
	# to bypass caches.
	dd_opts="oflag=direct,sync bs=512 conv=fsync,sync"
	status_dir=`dirname $STATUSFILE`
	[ -d "$status_dir" ] ||
		mkdir -p "$status_dir"
	err_output=`
		echo "${OCF_RESOURCE_INSTANCE}" | dd of=${STATUSFILE} $dd_opts 2>&1`
	if [ $? -ne 0 ]; then
		ocf_log err "Failed to write status file ${STATUSFILE}"
		ocf_log err "dd said: $err_output"
		return $OCF_ERR_GENERIC
	fi
	test -f ${STATUSFILE}
	if [ $? -ne 0 ]; then
		ocf_log err "Cannot stat the status file ${STATUSFILE}"
		return $OCF_ERR_GENERIC
	fi
	cat ${STATUSFILE} > /dev/null
	if [ $? -ne 0 ]; then
		ocf_log err "Cannot read the status file ${STATUSFILE}"
		return $OCF_ERR_GENERIC
	fi
	return $OCF_SUCCESS
}
Dedup_Filesystem_monitor()
{
        echo "check whether ${OCF_RESOURCE_INSTANCE} exits now"
        ocf_log debug "check whether ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} exits now"
        ha_pseudo_resource $OCF_RESOURCE_INSTANCE monitor
        rc=$?
        if [ $rc -ne $OCF_SUCCESS ]; then
                echo "$OCF_RESOURCE_INSTANCE not exist"
                return $rc
        fi

	Dedup_Filesystem_status
	rc=$?
	if [ $rc -ne $OCF_SUCCESS ]; then
		return $rc
	fi

	if [ $rc -eq $OCF_SUCCESS -a $OCF_CHECK_LEVEL -gt 0 ]; then
		case "$OCF_CHECK_LEVEL" in
		10) Dedup_Filesystem_monitor_10; rc=$?;;
		20) Dedup_Filesystem_monitor_20; rc=$?;;
		*)
			ocf_log err "unsupported monitor level $OCF_CHECK_LEVEL"
			rc=$OCF_ERR_CONFIGURED
		;;
		esac
	fi
	return $rc
}
# end of Dedup_Filesystem_monitor


#
# VALIDATE_ALL: Are the instance parameters valid?
#	FIXME!!  The only part that's useful is the return code.
#	This code always returns $OCF_SUCCESS (!)
#
Dedup_Filesystem_validate_all()
{
	if [ -n $MOUNTPOINT -a ! -d $MOUNTPOINT ]; then
		ocf_log warn "Mountpoint $MOUNTPOINT does not exist"
	fi

	# Check if the $FSTYPE is workable
	# NOTE: Without inserting the $FSTYPE module, this step may be imprecise
	# TODO: This is Linux specific crap.
	if [ ! -z "$FSTYPE" -a "$FSTYPE" != none ]; then
		cut -f2 /proc/filesystems |grep -q ^$FSTYPE$
		if [ $? -ne 0 ]; then
			modpath=/lib/modules/`uname -r` 
			moddep=$modpath/modules.dep
			# Do we have $FSTYPE in modules.dep?
			cut -d' ' -f1 $moddep |grep -q "^$modpath.*$FSTYPE\.k\?o:$"
			if [ $? -ne 0 ]; then
				ocf_log info "It seems we do not have $FSTYPE support"
			fi
		fi
	fi

	# If we are supposed to do monitoring with status files, then
	# we need a utility to write in O_DIRECT mode.
	if [ $OCF_CHECK_LEVEL -gt 0 ]; then
		check_binary dd
		# Note: really old coreutils version do not support
		# the "oflag" option for dd. We don't check for that
		# here. In case dd does not support oflag, monitor is
		# bound to fail, with dd spewing an error message to
		# the logs. On such systems, we must do without status
		# file monitoring.
	fi

	#TODO: How to check the $options ?
	return $OCF_SUCCESS
}

# Check the arguments passed to this script
if [ $# -ne 1 ]; then
	usage
	exit $OCF_ERR_ARGS
fi

MNTTAB_NAME="/etc/ilio/mnttab"
tmp_MOUNTPOINT=""
tmp_DEVICE=""
tmp_VDEVICE=""
tmp_options=""

# Check the OCF_RESKEY_ environment variables...
DEVICE=$OCF_RESKEY_device
tmp_VDEVICE=`awk -F "}}##0##{{" '{print $3}' $MNTTAB_NAME | sed -e 's/^[ \t]*//' 2> /dev/null`
tmp_DEVICE=`awk -F "}}##0##{{" '{print $1}' $MNTTAB_NAME | sed -e 's/^[ \t]*//' 2> /dev/null`
if [ ! -z "$tmp_VDEVICE" ]; then
	DEVICE="/dev/mapper/"$tmp_VDEVICE
else
	if [ ! -z "$tmp_DEVICE" ]; then
		DEVICE=$tmp_DEVICE
	fi
fi

FSTYPE=$OCF_RESKEY_fstype
if [ ! -z "$OCF_RESKEY_options" ]; then
	options="-o $OCF_RESKEY_options"
fi
#tmp_options="-o "`awk -F "}}##0##{{" '{print $5}' $MNTTAB_NAME | sed -e 's/^[ \t]*//' 2> /dev/null`
#if [ ! -z "$tmp_options" ]; then
#	options=$tmp_options
#fi

jdev=`awk -F "}}##0##{{" '{print $6}' $MNTTAB_NAME | sed -e 's/^[ \t]*//' 2> /dev/null`
if [ ! -z "$jdev" ]; then
	options=$options",journal_dev="$jdev
fi
FAST_STOP={$OCF_RESKEY_fast_stop:="yes"}

is_infrastructurevolume() {
	CFG_JSON="/etc/ilio/atlas.json"
	python <<END
import json
import sys
setup_info = {}
myfile = open("${CFG_JSON}", "r")
jsondata = myfile.read()
myfile.close()
setup_info["configure"] = json.loads(jsondata)
configure = setup_info["configure"]
is_infra = configure['volumeresources'][0].get('infrastructurevolume')
if not is_infra:
	is_infra = configure["usx"].get("infrastructurevolume")
if is_infra:
	sys.exit(0)
else:
	sys.exit(1)
END

}

is_journaled_mount() {
	echo "$options" | grep -w journaled >/dev/null 2>&1
}
EXPORTS_FILE="/etc/exports"
EXPORTS_OPT="*(rw,no_root_squash,no_subtree_check,insecure,nohide,fsid=1"
if [ is_journaled_mount -o is_infrastructurevolume ] ; then
	EXPORTS_OPT=$EXPORTS_OPT",sync)"
else
	EXPORTS_OPT=$EXPORTS_OPT",async)"
fi

# $OCF_RESKEY_nfs_options override defaults
if [ ! -z "$OCF_RESKEY_nfs_options" ]; then
	EXPORTS_OPT=$OCF_RESKEY_nfs_options
fi


OP=$1

# These operations do not require instance parameters
case $OP in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
usage)		usage
		exit $OCF_SUCCESS
		;;
esac

blockdevice=no
case $DEVICE in
"")	ocf_log err "Please set OCF_RESKEY_device to the device to be managed"
	exit $OCF_ERR_CONFIGURED
	;;
-*) # Oh... An option to mount instead...  Typically -U or -L
	;;
[!/]*:/*)	# An NFS filesystem specification...
	;;
//[!/]*/*)	# An SMB filesystem specification...
	;;
/dev/null)	# Special case for BSC
	blockdevice=yes
	;;
*)	if [ ! -b "$DEVICE"  -a ! -d "$DEVICE" -a "X$OP" != Xstart ] ; then
		ocf_log warn "Couldn't find device [$DEVICE]. Expected /dev/??? to exist"
	fi
	if [ ! -d "$DEVICE" ];then
		blockdevice=yes
	fi
	;;
esac


# Normalize instance parameters:

# It is possible that OCF_RESKEY_directory has one or even multiple trailing "/".
# But the output of `mount` and /proc/mounts do not.
if [ -z "$OCF_RESKEY_directory" ]; then
	if [ X$OP = "Xstart" -o $blockdevice = "no" ]; then
		ocf_log err "Please specify the directory"
		exit $OCF_ERR_CONFIGURED 
	fi
else
	MOUNTPOINT=$(echo $OCF_RESKEY_directory | sed 's/\/*$//')
	: ${MOUNTPOINT:=/}
	
#	tmp_MOUNTPOINT=`awk -F "}}##0##{{" '{print $4}' $MNTTAB_NAME  | sed -e 's/^[ \t]*//' | sed 's/\/*$//' 2> /dev/null`
#	if [ ! -z "$tmp_MOUNTPOINT" ]; then
#		MOUNTPOINT=$tmp_MOUNTPOINT
#	fi
	#Create the mount point, if it does not exist already
	if [ ! -d "$MOUNTPOINT" ]; then
		mkdir -p "$MOUNTPOINT"
	fi
	# At this stage, $MOUNTPOINT does not contain trailing "/" unless it is "/"
	# TODO: / mounted via Dedup_Filesystem sounds dangerous. On stop, we'll
	# kill the whole system. Is that a good idea?
fi

# Check to make sure the utilites are found
if [ "X${HOSTOS}" != "XOpenBSD" ];then
check_binary $MODPROBE
check_binary $FUSER
fi
check_binary $FSCK
check_binary $MOUNT
check_binary $UMOUNT

if [ "$OP" != "monitor" ]; then
	ocf_log info "Running $OP for $DEVICE on $MOUNTPOINT"
fi

# These operations do not require the clone checking + OCFS2
# initialization.
case $OP in
status)		Dedup_Filesystem_status
		exit $?
		;;
monitor)	Dedup_Filesystem_monitor
		exit $?
		;;
validate-all)	Dedup_Filesystem_validate_all
		exit $?
		;;
stop)		Dedup_Filesystem_stop
		exit $?
		;;
esac

CLUSTERSAFE=0
is_option "ro" &&
	CLUSTERSAFE=2

case $FSTYPE in
dedup|ext4|zfs)
	CLUSTERSAFE=0 # these are not allowed
	;;
esac

if [ -n "$OCF_RESKEY_CRM_meta_clone" ]; then
case $CLUSTERSAFE in
0)
	ocf_log err "DANGER! $FSTYPE on $DEVICE is NOT cluster-aware!"
	ocf_log err "DO NOT RUN IT AS A CLONE!"
	ocf_log err "Politely refusing to proceed to avoid data corruption."
	exit $OCF_ERR_CONFIGURED
	;;
2)
	ocf_log warn "$FSTYPE on $DEVICE is NOT cluster-aware!"
	ocf_log warn "But we'll let it run because it is mounted read-only."
	ocf_log warn "Please make sure that it's meta data is read-only too!"
	;;
esac
fi

case $OP in
start)	Dedup_Filesystem_start
	;;
notify)	Dedup_Filesystem_notify
	;;
*)	usage
	exit $OCF_ERR_UNIMPLEMENTED
	;;
esac
exit $?


