#!/bin/sh
#
# 
# CPOOL
#
# Description:	Manages an CPOOL volume as an HA resource
#
#
# Author:	Jin Lv
# License:	GNU General Public License (GPL)
# Copyright:	(C) 2013 Atlantis Computing Inc.
#
#	This code significantly inspired by the LVM resource
#	in FailSafe by Lars Marowsky-Bree
#
#
# An example usage in /etc/ha.d/haresources: 
#       node1  10.0.0.170 ServeRAID::1::1 CPOOL::myvolname
#
# See usage() function below for more details...
#
#	  OCF parameters are as below:
#		OCF_RESKEY_cpoolname
#		
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

FINDIF=$HA_BIN/findif
INTERNAL_LV_NAME="atlas_internal_lv"



#######################################################################


usage() {
  methods=`CPOOL_methods`
  methods=`echo $methods | tr ' ' '|'`
  cat <<-!
	usage: $0 $methods

	$0 manages an  Atlas Capacity Pool (CPOOL) as an HA resource

	The 'start' operation brings the given cpool online
	The 'stop' operation takes the given cpool offline
	The 'status' operation reports whether the cpool is available
	The 'monitor' operation reports whether the cpool seems present
	The 'validate-all' operation checks whether the OCF parameters are valid
	The 'methods' operation reports on the methods $0 supports

	!
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="CPOOL">
<version>1.0</version>

<longdesc lang="en">
Resource script for CPOOL. It manages an Atlas Capacity Pool (CPOOL) 
as an HA resource. 
</longdesc>
<shortdesc lang="en">Controls the availability of an CPOOL Volume Group</shortdesc>

<parameters>
<parameter name="cpoolname" unique="0" required="1">
<longdesc lang="en">
The name of capacity pool.
</longdesc>
<shortdesc lang="en">Volume group name</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="exclusive" unique="0" required="0">
<longdesc lang="en">
If set, the capacity pool will be activated exclusively.
</longdesc>
<shortdesc lang="en">Exclusive activation</shortdesc>
<content type="string" default="false" />
</parameter>

<parameter name="partial_activation" unique="0" required="0">
<longdesc lang="en">
If set, the capacity pool will be activated even only partial of the physical
volumes available. It helps one to set to true, when you are using mirroring
logical volumes.
</longdesc>
<shortdesc lang="en">Activate VG even with partial PV only</shortdesc>
<content type="string" default="false" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="30" />
<action name="stop" timeout="30" />
<action name="status" timeout="30" />
<action name="monitor" depth="0" timeout="30" interval="10" />
<action name="methods" timeout="5" />
<action name="meta-data" timeout="5" />
<action name="validate-all" timeout="5" />
</actions>
</resource-agent>
END
}

#
# methods: What methods/operations do we support?
#
CPOOL_methods() {
  cat <<-!
	start
	stop
	status
	monitor
	methods
	validate-all
	usage
	!
}

#
#	Return CPOOL status (silently)
#
CPOOL_status() {
  if 
    [ "$CPOOL_MAJOR" -eq "1" ]
  then
	vgdisplay $1 2>&1 | grep -i 'Status.*available' 2>&1 >/dev/null
	return $?
  else
	#vgdisplay -v $1 2>&1 | grep -i 'Status[ \t]*available' 2>&1 >/dev/null
	#vgdisplay -v $1 2>&1 | grep -i 'physical volumes missing' 2>&1 >/dev/null
	#return $?
	VGOUT=`vgdisplay -v $1 2>&1`
	rc=$?
	if [ $rc -eq 0 ]
	then
		#echo "$VGOUT" | grep -i 'Status[ \t]*available' >/dev/null
		echo "$VGOUT" | grep -i 'physical volumes missing' >/dev/null
		rc=$?
		if [ $rc -eq 0 ]
		then
			rc=1
		else
			rc=0	
		fi
	else
		ocf_log debug "CPOOL Volume $1 is not found: $rc."
	fi
	return $rc
  fi
}

#
#	Report on CPOOL volume status to stdout...
#
CPOOL_report_status() {

  if 
    [ "$CPOOL_MAJOR" -eq "1" ]
  then
	VGOUT=`vgdisplay $1 2>&1`
	echo "$VGOUT" | grep -i 'Status.*available' >/dev/null
	rc=$?
  else
	VGOUT=`vgdisplay -v $1 2>&1`
	rc=$?
	if [ $rc -eq 0 ]
	then
		#echo "$VGOUT" | grep -i 'Status[ \t]*available' >/dev/null
		echo "$VGOUT" | grep -i 'physical volumes missing' >/dev/null
		rc=$?
		if [ $rc -eq 0 ]
		then
			rc=1
		else
			rc=0	
		fi
	else
		ocf_log debug "CPOOL Volume $1 is not found: $rc."
	fi
  fi

  if
    [ $rc -eq 0 ]
  then
    : Volume $1 is available
  else
    ocf_log debug "CPOOL Volume $1 is not available (stopped)"
    return $OCF_NOT_RUNNING
  fi

  if
    echo "$VGOUT" | grep -i 'Access.*read/write' >/dev/null
  then
    ocf_log debug "Volume $1 is available read/write (running)"
  else
    ocf_log debug "Volume $1 is available read-only (running)"
  fi
  
  return $OCF_SUCCESS
}

#
#	Monitor the volume - does it really seem to be working?
#
#
CPOOL_monitor() {
  if
#    CPOOL_status $1
     [ -e /dev/$1/$INTERNAL_LV_NAME ]
  then
    : OK
  else
    ocf_log info "CPOOL Volume $1 is offline"
    return $OCF_NOT_RUNNING
  fi

  return $OCF_SUCCESS
#  vgck $1 >/dev/null 2>&1
#  return $?
}

#
#	Enable CPOOL volume
#
CPOOL_start() {

  # TODO: This MUST run vgimport as well

  ocf_log info "Activating capacity pool $1"

  ocf_run $CP_LOAD ha $1 

  if [ $? -ne 0 ]; then
	ocf_log err "Pool [$VOLUME] underlying storage initialize failed!"
	return $OCF_ERR_GENERIC
  fi

  if [ "$CPOOL_MAJOR" -eq "1" ]; then
	ocf_run vgscan $1
  else
	ocf_run vgscan
  fi

  active_mode="ly"
  if ocf_is_true "$OCF_RESKEY_exclusive" ; then
  	active_mode="ey"
  fi	
  partial_active=""
  if ocf_is_true "$OCF_RESKEY_partial_activation" ; then
	partial_active="--partial"
  fi

  #ocf_run vgchange -a $active_mode $partial_active $1 || return $OCF_ERR_GENERIC

  if CPOOL_status $1; then
    : OK Volume $1 activated just fine!
    return $OCF_SUCCESS 
  else
    ocf_log err "CPOOL: $1 did not activate correctly"
    return $OCF_NOT_RUNNING
  fi
}

#
#	Disable the CPOOL volume
#
CPOOL_stop() {

  vgdisplay "$1" 2>&1 | grep 'Volume group .* not found' >/dev/null && {
    ocf_log info "Volume group $1 not found"
    return 0
  }
  ocf_log info "Deactivating capacity pool $1"
  #ocf_run vgchange -a ln $1 || return 1

  ocf_run $CP_LOAD vg_stop $1 

  if [ $? -ne 0 ]; then
	ocf_log err "Pool [$VOLUME] underlying storage stop failed!"
	return $OCF_ERR_GENERIC
  fi

  if
    CPOOL_status $1
  then
    ocf_log err "CPOOL: $1 did not stop correctly"
    return $OCF_ERR_GENERIC 
  fi


  # TODO: This MUST run vgexport as well

  return $OCF_SUCCESS
}

#
#	Check whether the OCF instance parameters are valid
#
CPOOL_validate_all() {
  check_binary $AWK

#	Off-the-shelf tests...  
  vgck "$VOLUME" >/dev/null 2>&1
  
  if [ $? -ne 0 ]; then
	ocf_log err "Volume group [$VOLUME] does not exist or contains error!"
	exit $OCF_ERR_GENERIC
  fi

#	Double-check
  if 
    [ "$CPOOL_MAJOR" -eq "1" ]
  then
	vgdisplay "$VOLUME" >/dev/null 2>&1
  else
	vgdisplay -v "$VOLUME" >/dev/null 2>&1
  fi

  if [ $? -ne 0 ]; then
	ocf_log err "Volume group [$VOLUME] does not exist or contains error!"
	exit $OCF_ERR_GENERIC
  fi

  return $OCF_SUCCESS
}
#
#	'main' starts here...
#

# Locate the real pool work horse, Prefer .py file
CP_LOAD="/opt/milio/atlas/roles/pool/cp-load.py"
if [ ! -e $CP_LOAD ]
then
	CP_LOAD=${CP_LOAD}c
	if [ ! -e $CP_LOAD ]
	then
		ocf_log err "Cannot find cp-load.py[c]"
		exit $OCF_ERR_ARGS
	else
		CP_LOAD="python $CP_LOAD"
	fi
fi


if
  [ $# -ne 1 ]
then
  usage
  exit $OCF_ERR_ARGS 
fi

case $1 in
  meta-data)	meta_data
		exit $OCF_SUCCESS;;

  methods)	CPOOL_methods
		exit $?;;

  usage)	usage
		exit $OCF_SUCCESS;;
  *)		;;
esac

if 
  [ -z "$OCF_RESKEY_cpoolname" ]
then
#  echo "You must identify the capacity pool name!"
  ocf_log err "You must identify the capacity pool name!"
#  usage
  exit $OCF_ERR_CONFIGURED 
fi

# Get the LVM version number, for this to work we assume(thanks to panjiam):
# 
# LVM1 outputs like this
#
#	# vgchange --version
#	vgchange: Logical Volume Manager 1.0.3
#	Heinz Mauelshagen, Sistina Software  19/02/2002 (IOP 10)
#
# LVM2 and higher versions output in this format
#
#	# vgchange --version
#	CPOOL version:     2.00.15 (2004-04-19)
#	Library version: 1.00.09-ioctl (2004-03-31)
#	Driver version:  4.1.0

CPOOL_VERSION=`vgchange --version 2>&1 | \
	$AWK '/Logical Volume Manager/ {print $5"\n"; exit; }
	     /LVM version:/ {printf $3"\n"; exit;}'`
rc=$?

if
  ( [ $rc -ne 0 ] || [ -z "$CPOOL_VERSION" ] )
then
  ocf_log err "CPOOL: $1 could not determine CPOOL version. Try 'vgchange --version' manually and modify $0 ?"
  exit $OCF_ERR_INSTALLED
fi
CPOOL_MAJOR="${CPOOL_VERSION%%.*}"

VOLUME=$OCF_RESKEY_cpoolname

# What kind of method was invoked?
case "$1" in

  start)	CPOOL_start $VOLUME
		exit $?;;

  stop)		CPOOL_stop $VOLUME
		exit $?;;

  status)	CPOOL_report_status $VOLUME
		exit $?;;

  monitor)	CPOOL_monitor $VOLUME
		exit $?;;

  validate-all)	CPOOL_validate_all
		;;

  *)		usage
		exit $OCF_ERR_UNIMPLEMENTED;;
esac
